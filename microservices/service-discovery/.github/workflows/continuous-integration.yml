name: Continuous Integration

on:
    push:
        branches:
            - 'master'

env:
    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    IMAGE: ${{ secrets.DOCKER_USERNAME }}/gym-management-service-discovery

jobs:
    build-test:
        name: Build & Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Setup NodeJS
              uses: actions/setup-node@v2
              with:
                    node-version: 20.11.0
            - name: Install Dependencies
              run: npm install
            - name: Setup Test Environment
              run: npm run docker:test -- -d
            - name: Run Tests
              run: npm test

    dockerize:
        name: Dockerize and Push to Docker Hub
        runs-on: ubuntu-latest
        needs: lint-test
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Get Package Version
              id: package-version
              uses: martinbeentjes/npm-get-version-action@master
            - name: Build The Image
              run: docker build . -f docker/prod/Dockerfile -t ${{ env.IMAGE }}:${{ steps.package-version.outputs.current-version }}
            - name: Login to Docker Hub
              uses: docker/login-action@v1
              with:
                  username: ${{ env.DOCKER_USERNAME }}
                  password: ${{ env.DOCKER_PASSWORD }}
            - name: Push The current version To Docker Hub
              run: docker push ${{ env.IMAGE }}:${{ steps.package-version.outputs.current-version }}
            - name: Update latest tag
              run: docker tag ${{ env.IMAGE }}:${{ steps.package-version.outputs.current-version }} ${{ env.IMAGE }}:latest
            - name: Push latest tag to Docker Hub
              run: docker push ${{ env.IMAGE }}:latest

#    deploy:
#        name: Deploy To Production & Staging
#        runs-on: ubuntu-latest
#        needs: dockerize
#        env:
#            REDIS_URL: ${{ secrets.REDIS_URL }}
#            PORT: ${{ secrets.PORT }}
#            SECRET: ${{ secrets.SECRET }}

#            CONTAINER_NAME: gym-management-service-discovery
#            CONTAINER_PORT: 8080
